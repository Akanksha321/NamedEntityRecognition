{"cells":[{"metadata":{"_uuid":"ba2cb659-cfb2-477a-b1d8-a260bcb52e8c","_cell_guid":"24bc1074-d09a-4ef5-b1b7-de4cef120dcd","trusted":true},"cell_type":"code","source":"# %% [code] {\"_kg_hide-output\":true}\n#!pip install git+https://www.github.com/keras-team/keras-contrib.git\n\n# %% [code]\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport keras\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom keras_contrib.layers import CRF\nfrom keras.utils import to_categorical\nfrom keras.models import Model, Input\nfrom keras.layers import LSTM, Embedding, Dense, TimeDistributed, Dropout, Bidirectional\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score,f1_score,recall_score,precision_score, classification_report\nimport logging\nimport warnings\nwarnings.filterwarnings('ignore')\nlogger = logging.getLogger(__name__)\n# Any results you write to the current directory are saved as output.\n\n# %% [code]\ninvoice_df = pd.read_csv(\"../input/nerdataset/LabelledDataNER.csv\", encoding = \"ISO-8859-1\", error_bad_lines=False)\ninvoice_df.head(n=2)\nlogger.info(\"***** Reading dataset completed *****\")\nlogger.info(\" Size of dataset = %d\", len(invoice_df))\n\n\n# %% [code]\ninvoice_df.drop('Filename',axis=1, inplace = True)\ninvoice_data =invoice_df.copy()\n\n# %% [code]\n\"Function to get sentences separately\"\ndef sentence_getter(sent):\n    agg_func = lambda s: [(w, t) for w,t in zip(s[\"Word\"].values.tolist(),\n                                                        s[\"Label\"].values.tolist())]\n    grouped = invoice_data.groupby(\"SentenceID\").apply(agg_func)\n    sentences = [s for s in grouped]\n    return sentences\n\nsentences=sentence_getter(invoice_data)\n\nmaxlen = max([len(s) for s in sentences])\nprint ('Maximum sequence length:', maxlen)\n\n\n# %% [code]\n#Words distribution across Labels\nimport seaborn as sns\nplt.figure(figsize=(10, 5))\nax = sns.countplot('Label', data=invoice_data.loc[invoice_data['Label'] != 'Other'])\nax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha=\"center\")\nplt.tight_layout()\nplt.show()\n\n# %% [code]\nwords = list(set(invoice_data[\"Word\"].values)) #unique words\nn_words = len(words) #no of unique words\nlabels = list(set(invoice_data[\"Label\"].values))  #unique labels\nn_labels = len(labels) #no of tags\n\n\n# %% [code]\n\"Converting words to numbers and numbers to words\"\nfrom future.utils import iteritems\nword2id = {w: i for i, w in enumerate(words)}\ntag2id = {t: i for i, t in enumerate(labels)}\nid2tag = {v: k for k, v in iteritems(tag2id)}\n\n# %% [code]\nfrom keras.preprocessing.sequence import pad_sequences\nX = [[word2id[w[0]] for w in s] for s in sentences]\nX = pad_sequences(maxlen=175, sequences=X, padding=\"post\",value=0)\n\ny = [[tag2id[w[1]] for w in s] for s in sentences]\ny = pad_sequences(maxlen=175, sequences=y, padding=\"post\", value=1)\ny = [to_categorical(i, num_classes=n_labels) for i in y]\n\ninput = Input(shape=(175,))\nword_embedding_size = 200\nmodel = Embedding(input_dim=n_words, output_dim=word_embedding_size, input_length=175)(input)\nmodel=Dropout(0.2)(model)\nmodel = Bidirectional(LSTM(units=word_embedding_size, \n                           return_sequences=True, \n                          dropout = 0.1\n                           ))(model)\nmodel = TimeDistributed(Dense(n_labels, activation=\"relu\"))(model)  \n\ncrf = CRF(n_labels)  # CRF layer\nout = crf(model)  # output\nmodel = Model(input, out)\nmodel.summary()\n\n# %% [code]\n#adam = k.optimizers.Adam(lr=0.0005)\nmodel.compile(optimizer='adam', loss=crf.loss_function, metrics=[crf.accuracy, 'accuracy'])\n\n# %% [code] {\"scrolled\":true,\"_kg_hide-output\":true}\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1)\n# Train!\nlogger.info(\"***** Running training *****\")\nlogger.info(\"  Num examples = %d\", len(X_train))\nhistory = model.fit(X_train, np.array(y_train), batch_size=32, epochs=6, validation_split=0.2, verbose=1) #training the model\n\n# %% [code]\npred = model.predict(np.array([X_test[0]]))\npred = np.argmax(pred, axis=-1)\ngt = np.argmax(y_test[0], axis=-1)\nprint(gt)\nprint(\"{:14}: ({:5}): {}\".format(\"Word\", \"True\", \"Pred\"))\nfor idx, (w,pred) in enumerate(zip(X_test[0],pred[0])):\n    #\n    print(\"{:14}: ({:15}): {}\".format(words[w],id2tag[gt[idx]],labels[pred]))\n\n# %% [code]\npred = model.predict(np.array(X_test))  \n\n# %% [markdown]\n# ## Standard Classification Report\n\n# %% [code]\n\nprint(classification_report(np.argmax(y_test, 2).ravel(), np.argmax(pred, axis=2).ravel(),labels=list(id2tag.keys()), target_names=list(id2tag.values())))\n\n# %% [code]\nfrom sklearn.metrics import accuracy_score,f1_score,recall_score,precision_score\nF1_score=f1_score(y_test[0],pred[0],average='weighted')\nprint(\"F1 score:\",F1_score)\n\n# %% [code] {\"_kg_hide-output\":true}\n##!pip install transformers\n\n# %% [code]\n#from transformers import BertTokenizer, BertConfig\n\n# %% [code]\n#tokenizer = BertTokenizer.from_pretrained('bert-base-cased', do_lower_case=False) \n\n# %% [code]\n","execution_count":17,"outputs":[{"output_type":"stream","text":"Maximum sequence length: 175\n","name":"stdout"},{"output_type":"display_data","data":{"text/plain":"<Figure size 720x360 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","text":"_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\ninput_15 (InputLayer)        (None, 175)               0         \n_________________________________________________________________\nembedding_15 (Embedding)     (None, 175, 200)          141800    \n_________________________________________________________________\ndropout_5 (Dropout)          (None, 175, 200)          0         \n_________________________________________________________________\nbidirectional_15 (Bidirectio (None, 175, 400)          641600    \n_________________________________________________________________\ntime_distributed_15 (TimeDis (None, 175, 11)           4411      \n_________________________________________________________________\ncrf_15 (CRF)                 (None, 175, 11)           275       \n=================================================================\nTotal params: 788,086\nTrainable params: 788,086\nNon-trainable params: 0\n_________________________________________________________________\nTrain on 6 samples, validate on 2 samples\nEpoch 1/6\n6/6 [==============================] - 11s 2s/step - loss: 2.6229 - crf_viterbi_accuracy: 0.0038 - acc: 0.0038 - val_loss: 2.5612 - val_crf_viterbi_accuracy: 0.0029 - val_acc: 0.0029\nEpoch 2/6\n6/6 [==============================] - 0s 73ms/step - loss: 2.5719 - crf_viterbi_accuracy: 0.0067 - acc: 0.0038 - val_loss: 2.4808 - val_crf_viterbi_accuracy: 0.0057 - val_acc: 0.0057\nEpoch 3/6\n6/6 [==============================] - 1s 90ms/step - loss: 2.5051 - crf_viterbi_accuracy: 0.0057 - acc: 0.0038 - val_loss: 2.3667 - val_crf_viterbi_accuracy: 0.1743 - val_acc: 0.1743\nEpoch 4/6\n6/6 [==============================] - 1s 99ms/step - loss: 2.4013 - crf_viterbi_accuracy: 0.1352 - acc: 0.0038 - val_loss: 2.2130 - val_crf_viterbi_accuracy: 0.1771 - val_acc: 0.1771\nEpoch 5/6\n6/6 [==============================] - 1s 89ms/step - loss: 2.2712 - crf_viterbi_accuracy: 0.1495 - acc: 0.0038 - val_loss: 1.9962 - val_crf_viterbi_accuracy: 0.5029 - val_acc: 0.5029\nEpoch 6/6\n6/6 [==============================] - 0s 75ms/step - loss: 2.0836 - crf_viterbi_accuracy: 0.4800 - acc: 0.0038 - val_loss: 1.6564 - val_crf_viterbi_accuracy: 0.6457 - val_acc: 0.6457\n[6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6\n 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6\n 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6\n 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 1 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6\n 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6]\nWord          : (True ): Pred\nted           : (Other          ): I-CustomerName\nbates         : (Other          ): E-InvoiceDate\na             : (Other          ): I-CustomerName\ncompany.inc   : (Other          ): E-InvoiceDate\nfadvertising  : (Other          ): I-CustomerName\n1218          : (Other          ): E-InvoiceDate\neronaway      : (Other          ): I-CustomerName\nnew           : (Other          ): E-InvoiceDate\nyor           : (Other          ): I-CustomerName\nnese          : (Other          ): E-InvoiceDate\nyork          : (Other          ): I-CustomerName\n10095.usa     : (Other          ): E-InvoiceDate\nf             : (Other          ): I-CustomerName\nprema         : (Other          ): E-InvoiceDate\n217           : (Other          ): I-CustomerName\nate           : (Other          ): E-InvoiceDate\nem            : (Other          ): I-CustomerName\ncanna         : (Other          ): E-InvoiceDate\ngatenererd    : (Other          ): I-CustomerName\naum           : (Other          ): E-InvoiceDate\nyork          : (Other          ): Other\none           : (Other          ): B-TotalAmount\nient          : (Other          ): B-CustomerName\now            : (Other          ): Other\ngrown         : (Other          ): B-TotalAmount\nwilliamson    : (Other          ): B-CustomerName\ntobacco       : (Other          ): Other\ncorp          : (Other          ): B-TotalAmount\nproouctignh   : (Other          ): B-CustomerName\nestimate      : (Other          ): Other\nreport        : (Other          ): B-TotalAmount\nacis          : (Other          ): B-CustomerName\nwoe           : (Other          ): Other\naot           : (Other          ): B-TotalAmount\nlling         : (Other          ): B-CustomerName\ntype          : (Other          ): Other\nprogressive   : (Other          ): B-TotalAmount\nmeta          : (Other          ): I-CustomerName\nrint          : (Other          ): E-InvoiceDate\nbaodn         : (Other          ): I-CustomerName\nrun           : (Other          ): E-InvoiceDate\nch            : (Other          ): I-CustomerName\naprzist       : (Other          ): E-InvoiceDate\nat            : (Other          ): I-CustomerName\n1a            : (Other          ): E-InvoiceDate\npage          : (Other          ): I-CustomerName\n2             : (Other          ): E-InvoiceDate\naor           : (Other          ): I-CustomerName\npmlbo4        : (Other          ): E-InvoiceDate\nlike          : (Other          ): I-CustomerName\nyen           : (Other          ): E-InvoiceDate\nlong          : (Other          ): I-CustomerName\nput           : (Other          ): E-InvoiceDate\nrate          : (Other          ): I-CustomerName\nser           : (Other          ): E-InvoiceDate\nstiong        : (Other          ): I-CustomerName\nan-pr-t7-3    : (Other          ): E-InvoiceDate\nkote          : (Other          ): I-CustomerName\n76-90         : (Other          ): E-InvoiceDate\ncomm.         : (Other          ): I-CustomerName\nvertsl        : (Other          ): E-InvoiceDate\nspr           : (Other          ): I-CustomerName\nungs          : (Other          ): E-InvoiceDate\na/f           : (Other          ): Other\nngs           : (Other          ): B-TotalAmount\ngilling       : (Other          ): B-CustomerName\n1600          : (Other          ): Other\nw             : (Other          ): B-TotalAmount\nhill          : (Other          ): B-CustomerName\nst            : (Other          ): Other\n19727         : (Other          ): B-TotalAmount\ntimefessence/t: (Other          ): B-CustomerName\nguidezjet/ng  : (Other          ): Other\ngalls         : (Other          ): B-TotalAmount\n47            : (Other          ): B-CustomerName\nbld           : (Other          ): Other\nagoress       : (Other          ): B-TotalAmount\nleuisville    : (Other          ): B-CustomerName\nkw            : (Other          ): Other\n40202         : (Other          ): B-TotalAmount\nphotog-       : (Other          ): B-CustomerName\nalpha         : (Other          ): Other\nfp            : (Other          ): B-TotalAmount\n10267         : (Other          ): B-CustomerName\ncoma          : (Other          ): Other\nls$1on        : (Other          ): B-TotalAmount\noriel         : (Other          ): B-CustomerName\nwal           : (Other          ): Other\nresent        : (Other          ): B-TotalAmount\nrate          : (Other          ): B-CustomerName\nestimate      : (Other          ): Other\nestimate      : (Other          ): B-TotalAmount\n44            : (Other          ): B-CustomerName\npuotosmeuns   : (Other          ): Other\nfee           : (Other          ): B-TotalAmount\n1300200       : (Other          ): B-CustomerName\n6             : (Other          ): Other\ncla           : (Other          ): B-TotalAmount\nprnt-ove      : (Other          ): B-CustomerName\ntr            : (Other          ): Other\n225           : (Other          ): B-TotalAmount\ng9            : (Other          ): B-CustomerName\nretouching    : (Other          ): Other\n40000         : (Other          ): B-TotalAmount\n21            : (Other          ): B-CustomerName\nphotostats    : (Other          ): Other\n75200         : (Other          ): B-TotalAmount\naz            : (Other          ): B-CustomerName\nmechanicals   : (Other          ): Other\n223200        : (Other          ): B-TotalAmount\n42            : (Other          ): B-CustomerName\ntaansp        : (Other          ): Other\nor            : (Other          ): B-TotalAmount\nehcses.       : (Other          ): B-CustomerName\n150200        : (Other          ): Other\n44            : (Other          ): B-TotalAmount\ntreotnarets   : (Other          ): B-CustomerName\n180           : (Other          ): Other\npenanss       : (Other          ): B-TotalAmount\n25200         : (Other          ): B-CustomerName\n70            : (Other          ): Other\nmev.          : (Other          ): B-TotalAmount\nsmes          : (Other          ): B-CustomerName\nfax           : (Other          ): Other\n207.2         : (Other          ): B-TotalAmount\nfoals         : (Other          ): B-CustomerName\n2197.2        : (Other          ): Other\n2797-20       : (Other          ): B-TotalAmount\ncome          : (Other          ): B-CustomerName\n1$5i0ns       : (Other          ): Other\ntotals        : (Other          ): B-TotalAmount\nlorass        : (Other          ): B-CustomerName\n2797.2        : (B-TotalAmount  ): Other\nweg           : (Other          ): B-TotalAmount\ngaestocr      : (Other          ): B-CustomerName\nphotdgraphy   : (Other          ): Other\nprice         : (Other          ): B-TotalAmount\nfor           : (Other          ): B-CustomerName\nall           : (Other          ): Other\nmedia         : (Other          ): B-TotalAmount\necr           : (Other          ): B-CustomerName\nsone          : (Other          ): Other\nyear          : (Other          ): B-TotalAmount\nwsg           : (Other          ): B-CustomerName\nlima          : (Other          ): Other\nat            : (Other          ): B-TotalAmount\n825           : (Other          ): B-CustomerName\nb/c           : (Other          ): Other\ns209          : (Other          ): B-TotalAmount\nat            : (Other          ): B-CustomerName\n7c            : (Other          ): I-CustomerName\n4203          : (Other          ): E-InvoiceDate\nat            : (Other          ): I-CustomerName\n650           : (Other          ): E-InvoiceDate\nge            : (Other          ): I-CustomerName\nip            : (Other          ): E-InvoiceDate\ntw            : (Other          ): I-CustomerName\nfila          : (Other          ): E-InvoiceDate\nthare         : (Other          ): I-CustomerName\nls            : (Other          ): E-InvoiceDate\nless          : (Other          ): I-CustomerName\nclear         : (Other          ): E-InvoiceDate\ncuts          : (Other          ): I-CustomerName\nworice.       : (Other          ): E-InvoiceDate\nat            : (Other          ): I-CustomerName\n19            : (Other          ): E-InvoiceDate\noda           : (Other          ): I-CustomerName\nto            : (Other          ): E-InvoiceDate\nthe           : (Other          ): I-CustomerName\npity          : (Other          ): E-InvoiceDate\nof            : (Other          ): I-CustomerName\nthe           : (Other          ): E-InvoiceDate\ndocument      : (Other          ): I-CustomerName\nweieg         : (Other          ): E-InvoiceDate\nfilo.         : (Other          ): I-CustomerName\n                 precision    recall  f1-score   support\n\n  I-InvoiceDate       0.00      0.00      0.00         0\n  B-TotalAmount       0.00      0.00      0.00         1\n  I-TotalAmount       0.00      0.00      0.00         0\nI-InvoiceNumber       0.00      0.00      0.00         0\n E-CustomerName       0.00      0.00      0.00         0\nB-InvoiceNumber       0.00      0.00      0.00         0\n          Other       0.97      0.20      0.33       174\n  B-InvoiceDate       0.00      0.00      0.00         0\n B-CustomerName       0.00      0.00      0.00         0\n  E-InvoiceDate       0.00      0.00      0.00         0\n I-CustomerName       0.00      0.00      0.00         0\n\n      micro avg       0.19      0.19      0.19       175\n      macro avg       0.09      0.02      0.03       175\n   weighted avg       0.97      0.19      0.32       175\n\nF1 score: 0.32349965823650034\n","name":"stdout"}]}],"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat":4,"nbformat_minor":4}